AWSTemplateFormatVersion: '2010-09-09'
Description: "Deploy single windows EC2 Instance and join domain with SSM Association"
Parameters:
  LaunchTemplateSecurityGroupParameter:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Select EC2 security group to assign to the launch template.
  VpcIdParameter:
    Type: List<AWS::EC2::VPC::Id>
    Description: List of Virtual Private Cloud (VPC) Ids in your account.
  ELBSchemeParameter:
    Type: String
    Default: internet-facing
    AllowedValues:
      - internet-facing
      - internal
    Description: Select whether the ELB is internet-facing (public) or internal (private).
  ELBSubnetParameter:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select EC2 subnets to assign to the ELB.
  ELBSecurityGroupParameter:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Select EC2 security group to assign to the ELB.
  ASGMinSizeParameter:
    Type: Number
    Description: Minimum instance size for the Auto Scaling Group.
  ASGMaxSizeParameter:
    Type: Number
    Description: Maximum instance size for the Auto Scaling Group.
  ASGDesiredCapacityParameter:
    Type: Number
    Description: Desired capacity instance size for the Auto Scaling Group.
  ASGSubnetParameter:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select EC2 subnets to assign to the Auto Scaling Group.
  DomainJoinSecrets:
    Description: "The Secrets Manager name or ARN that will be used to perform all need domain actions."
    Type: "String"
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: example.com
    Description: Fully qualified domain name (FQDN).
    MaxLength: '255'
    MinLength: '2'
    Type: String
  EC2InstanceType:
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
    Default: m5.large
    Description: Amazon EC2 instance type
    Type: String
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: "/aws/service/ami-windows-latest/Windows_Server-2019-English-Core-Base"
  SSMInstanceRoleArn:
    Type: String
  SSMInstanceProfileName:
    Type: String
Resources:
  LambdaSSMRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:DeleteObject
                - s3:ListBucket
              Resource:
                - !Sub "arn:aws:s3:::${ConfigBucket}"
                - !Sub "arn:aws:s3:::${ConfigBucket}/*"
          PolicyName: write-mof-s3
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  WriteMOFFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def create_object(bucket, body, key):
              s3 = boto3.client('s3')
              s3.put_object(Body=body,Bucket=bucket, Key=key)
          def delete_objects(bucket, key):
              s3 = boto3.client('s3')
              objects = s3.list_objects_v2(Bucket=bucket)
              logsobjects = s3.list_objects_v2(Bucket=bucket, Prefix='logs')
              if logsobjects['KeyCount'] != 0:
                for object in logsobjects['Contents']:
                   s3.delete_object(Bucket=bucket, Key=object['Key'])
                s3.delete_object(Bucket=bucket, Key=key)
              else:
                s3.delete_object(Bucket=bucket, Key=key)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  bucket = event['ResourceProperties']['Bucket']
                  body = event['ResourceProperties']['Body']
                  key = event['ResourceProperties']['Key']
                  if event['RequestType'] == 'Delete':
                      delete_objects(bucket, key)
                  else:
                      create_object(bucket, body, key)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
      Handler: index.handler
      Role: !GetAtt LambdaSSMRole.Arn
      Runtime: python3.7
      Timeout: 240
  WriteDomainJoinMOF:
    Type: Custom::WriteMOFFile
    Properties:
      ServiceToken: !GetAtt WriteMOFFunction.Arn
      Bucket: !Ref ConfigBucket
      Key: !Sub "DomainJoinIIS-${AWS::StackName}.mof"
      Body: !Sub |
        /*
        @TargetNode='localhost'
        */
        instance of MSFT_Credential as $MSFT_Credential1ref
        {
        Password = "stringdoesntmatter";
         UserName = "${DomainJoinSecrets}";
        
        };
        instance of DSC_Computer as $DSC_Computer1ref
        {
        ResourceID = "[Computer]JoinDomain";
         Credential = $MSFT_Credential1ref;
         DomainName = "{tag:DomainToJoin}";
         Name = "{tag:Name}";
         ModuleName = "ComputerManagementDsc";
         ModuleVersion = "8.0.0";
         ConfigurationName = "DomainJoin";
        };
        instance of MSFT_RoleResource as $MSFT_RoleResource1ref
        {
        ResourceID = "[WindowsFeature]WebServer";
         Ensure = "Present";
         Name = "Web-Server";
         ModuleName = "PSDesiredStateConfiguration";
        ModuleVersion = "1.0";
         ConfigurationName = "DomainJoin";
        };
        instance of MSFT_ScriptResource as $MSFT_ScriptResource1ref
        {
        ResourceID = "[Script]GetWebFiles";
         GetScript = "\n                $filelocation = \"c:\\webfiles\\index.htm\"\n                Return @{Result = [string]$(test-path $filelocation)}\n            ";
         TestScript = "\n                $filelocation = \"c:\\webfiles\\index.htm\"\n                if((test-path $filelocation) -eq $false) {\n                    Write-Verbose 'Files need to be Downloaded'\n                    Return $false\n                } else {\n                    Write-Verbose 'Files are present locally'\n                    Return $true\n                }\n            ";
         SetScript = "\n                Copy-S3Object -Bucket ${ConfigBucket} -key webfiles/index.htm -LocalFile c:\\inetpub\\wwwroot\\index.htm\n            ";
         ModuleName = "PSDesiredStateConfiguration";
        ModuleVersion = "1.0";
        DependsOn = {
            "[WindowsFeature]WebServer"};
         ConfigurationName = "DomainJoin";
        };
        instance of OMI_ConfigurationDocument
                            {
         Version="2.0.0";
                                MinimumCompatibleVersion = "1.0.0";
                                CompatibleVersionAdditionalProperties= {"Omi_BaseResource:ConfigurationName"};
                                Name="DomainJoin";
                            };
  WriteHtmlFile:
    Type: Custom::WriteMOFFile
    Properties:
      ServiceToken: !GetAtt WriteMOFFunction.Arn
      Bucket: !Ref ConfigBucket
      Key: "webfiles/index.htm"
      Body: |
        <html>
          <head>
            <title>AWS re:Invent 2020 Test Page</title>
          </head>
          <style>div {text-align: center;}</style>
          <style>h1 {text-align: center;}</style>
          <body bgcolor=white>
            <h1>This is a Test Page to show that an IIS Server is up and ready to roll on AWS!</h1>
            <div><a href="https://aws.amazon.com/what-is-cloud-computing"><img src="https://d0.awsstatic.com/logos/powered-by-aws.png" alt="Powered by AWS Cloud Computing"></a></div>
          </body>
        </html>
  SSMInstanceRole: 
    Type : AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: 
                  - !Sub 'arn:aws:s3:::aws-ssm-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::aws-windows-downloads-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::amazon-ssm-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*'
                  - !Sub 'arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*'
                  - !Sub 'arn:aws:s3:::patch-baseline-snapshot-${AWS::Region}/*'
                Effect: Allow
          PolicyName: ssm-custom-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: 
                  - !Ref 'DomainJoinSecrets'
          PolicyName: ssm-secrets-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:CreateTags
                Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
          PolicyName: qs-tags-Policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:ListBucket
                Resource: 
                  - !Sub "arn:aws:s3:::${ConfigBucket}"
                  - !Sub "arn:aws:s3:::${ConfigBucket}/*"
                Effect: Allow
          PolicyName: s3-instance-bucket-policy
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "ec2.amazonaws.com"
            - "ssm.amazonaws.com"
          Action: "sts:AssumeRole"
  SSMInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
      - !Ref SSMInstanceRole
  EC2LaunchTemplateResource:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    Properties:
      LaunchTemplateData:
        InstanceType: !Ref 'EC2InstanceType'
        ImageId: !Ref 'LatestAmiId'
        SecurityGroupIds:
          - !Select
            - '0'
            - !Ref 'LaunchTemplateSecurityGroupParameter'
        IamInstanceProfile:
          Arn: !GetAtt 'SSMInstanceProfile.Arn'
        TagSpecifications:
           - 
            ResourceType: 'instance'
            Tags:
              - Key: "DomainToJoin"
                Value: !Ref "DomainDNSName"
              - Key: "CloudWatchAgent"
                Value: "Yes"
              - Key: "CloudWatchConfig"
                Value: "IIS-Windows"
        UserData: !Base64
          Fn::Join:
            - ''
            - - "<powershell>\n"
              - 'Import-Module AWSPowerShell'
              - "\n"
              - '$instanceid = (Invoke-RestMethod -Method Get -Uri http://169.254.169.254/latest/meta-data/instance-id)'
              - "\n"
              - 'New-EC2Tag -Resource $instanceId -Tag @{Key="Name";Value=$env:COMPUTERNAME}'
              - "\n"
              - "</powershell>\n"
  ALBResource:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: !Ref 'ELBSchemeParameter'
      Subnets:
        - !Select
          - '0'
          - !Ref 'ELBSubnetParameter'
        - !Select
          - '1'
          - !Ref 'ELBSubnetParameter'
      SecurityGroups:
        - !Select
          - '0'
          - !Ref 'ELBSecurityGroupParameter'
  ALBTargetGroupResource:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Select
        - '0'
        - !Ref 'VpcIdParameter'
      HealthyThresholdCount: 5
      HealthCheckTimeoutSeconds: 120
      HealthCheckIntervalSeconds: 300
      UnhealthyThresholdCount: 10
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
  ALBListenerResource:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref 'ALBResource'
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'ALBTargetGroupResource'
  ASGResource:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: !Ref 'ASGMinSizeParameter'
      MaxSize: !Ref 'ASGMaxSizeParameter'
      DesiredCapacity: !Ref 'ASGDesiredCapacityParameter'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 60
      Cooldown: '30'
      LaunchTemplate:
        LaunchTemplateId: !Ref 'EC2LaunchTemplateResource'
        Version: !GetAtt 'EC2LaunchTemplateResource.LatestVersionNumber'
      VPCZoneIdentifier:
        - !Select
          - '0'
          - !Ref 'ASGSubnetParameter'
        - !Select
          - '1'
          - !Ref 'ASGSubnetParameter'
      TargetGroupARNs:
        - !Ref 'ALBTargetGroupResource'
  JoinDomainAssociation:
    DependsOn: 
      - ASGResource
      - WriteDomainJoinMOF
      - WriteHtmlFile
    Type: AWS::SSM::Association
    Properties:
      WaitForSuccessTimeoutSeconds: 600
      Name: AWS-ApplyDSCMofs
      Targets:
        - Key: "tag:DomainToJoin"
          Values:
           - !Ref "DomainDNSName"
      OutputLocation:
        S3Location: 
          OutputS3BucketName: !Ref ConfigBucket
          OutputS3KeyPrefix: 'logs/'
      ScheduleExpression: "cron(30 23 * * ? *)"
      MaxErrors: '1'
      MaxConcurrency: '1'
      Parameters:
        MofsToApply:
          - !Sub "s3:${ConfigBucket}:DomainJoinIIS-${AWS::StackName}.mof"
        ServicePath:
          - default
        MofOperationMode:
          - Apply
        ComplianceType:
          - Custom:DomainJoinSample
        ModuleSourceBucketName:
          - "NONE"
        AllowPSGalleryModuleSource:
          - "True"
        RebootBehavior:
          - "AfterMof"
        UseComputerNameForReporting:
          - "False"
        EnableVerboseLogging:
          - "False"
        EnableDebugLogging:
          - "False"
  CloudWatchAgentAssociation:
    DependsOn: 
      - ASGResource
    Type: AWS::SSM::Association
    Properties:
      WaitForSuccessTimeoutSeconds: 300
      Name: AWS-ConfigureAWSPackage
      Targets:
        - Key: "tag:CloudWatchAgent"
          Values: ["Yes"]
      OutputLocation:
        S3Location: 
          OutputS3BucketName: !Ref ConfigBucket
          OutputS3KeyPrefix: 'logs/'
      MaxErrors: '1'
      MaxConcurrency: '1'
      Parameters:
        action:
          - "Install"
        installationType:
          - "Uninstall and reinstall"
        name:
          - "AmazonCloudWatchAgent"
        version:
          - "latest"
  CloudWatchConfigAssociation:
    DependsOn: 
      - CloudWatchAgentAssociation
    Type: AWS::SSM::Association
    Properties:
      WaitForSuccessTimeoutSeconds: 300
      Name: AmazonCloudWatch-ManageAgent
      Targets:
        - Key: "tag:CloudWatchConfig"
          Values: ["IIS-Windows"]
      OutputLocation:
        S3Location: 
          OutputS3BucketName: !Ref ConfigBucket
          OutputS3KeyPrefix: 'logs/'
      MaxErrors: '1'
      MaxConcurrency: '1'
      Parameters:
        action:
          - "configure"
        mode:
          - 'ec2'
        optionalConfigurationLocation:
          - 'AmazonCloudWatch-windows'
        optionalConfigurationSource:
          - 'ssm'
        optionalRestart:
          - 'yes'
